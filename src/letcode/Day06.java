package letcode;

import java.util.*;

/**
 * @Auther:leeling
 * @Date:2020/4/30 Description:letcode
 */
public class Day06 {

    /**
     *    804.唯一摩尔斯密码词
     * @param words
     * @return
     */
    public int uniqueMorseRepresentations(String[] words) {
        HashMap<Character,String> hashMap = new HashMap<>();
        char ch = 'a';
        String[] list = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        for(int i = 0;i<list.length;i++)
        {
            hashMap.put(ch,list[i]);
            ch++;

        }
        StringBuilder sb = new StringBuilder();
        HashSet<String> set = new HashSet<>();

        for(int i=0;i<words.length;i++)
        {
            for(int j=0;j<words[i].length();j++)
            {

                char each = words[i].charAt(j);
                sb.append(hashMap.get(each));
            }
            set.add(sb.toString());
            sb.delete(0,sb.length());
        }
        return set.size();
    }



    /**
     *   1252.奇数值单元格的数目
     * @param n
     * @param m
     * @param indices
     * @return
     */
    public int oddCells(int n, int m, int[][] indices) {
        int[][] ret = new int[n][m];
        for(int i =0;i<ret.length;i++)
        {
            for(int j=0;j<ret[0].length;j++)
            {
                ret[i][j] =0;
            }
        }


        for (int i =0;i<indices.length;i++)

        {
            int needi = indices[i][0];
            int cows = 0;
            while (cows<m){
                ret[needi][cows] = ret[needi][cows]+1;
                cows++;
            }
            int rows = 0;
            int needj = indices[i][1];
            while (rows<n){
                ret[rows][needj] = ret[rows][needj]+1;
                rows++;
            }


        }

        int count = 0;
        for(int i = 0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(ret[i][j]%2!=0)
                {
                    count++;
                }
            }

        }
        return count;

    }



    /**
     * 461.汉明距离
     */
    public int hammingDistance(int x, int y) {
        int num = 0;
        String s1 = Integer.toBinaryString(x);
        String s2 = Integer.toBinaryString(y);
        StringBuilder sb = new StringBuilder();
        System.out.println(s1);
        System.out.println(s2);
        if(s1.length()<=s2.length())
        {
            for(int i=0;i<s2.length()-s1.length();i++)
            {
                sb.append('0');
            }
            sb.append(s1);
            for(int i =0;i<sb.length();i++)
            {
                if(sb.charAt(i)!=s2.charAt(i))
                {
                    num++;
                }
            }
        }
        if(s1.length()>s2.length())
        {
            for(int i=0;i<s1.length()-s2.length();i++)
            {
                sb.append('0');
            }
            sb.append(s2);
            for(int i =0;i<sb.length();i++)
            {
                if(sb.charAt(i)!=s1.charAt(i))
                {
                    num++;
                }
            }
        }



     return num;
    }


    /**
     *  1299.将每个元素替换为右侧最大元素
     * @param arr
     * @return
     */
    public int[] replaceElements(int[] arr) {
        int[] res = new int[arr.length];
        int max = -1;

        for (int i = arr.length - 1; i >= 0; i--) {
            res[i] = max;
            System.out.println("++"+res[i]);
            max = arr[i] > max ? arr[i] : max;
            System.out.println("--"+max);
        }

        return res;
//        int[] ret = new int[arr.length];
//        int max = 0;
//        for(int i=0;i<arr.length-1;i++)
//        {
//            max = arr[i+1];
//            System.out.println("---"+max);
//            for(int j=i+1;j<arr.length;j++)
//            {
//                System.out.println("+++"+arr[j]);
//                max = max>arr[j]? max:arr[j];
//            }
//            ret[i] = max;
//        }
//        ret[arr.length-1] = -1;
//        return ret;
    }


    /**
     *  面试题05
     * @param s
     * @return
     */
    public String replaceSpace(String s) {
        return s.replaceAll(" ","%20");

    }



    /**
     *     1021.删除最外层的括号
     * @param
     * @return
     */
    public int retflag(Character c)
    {
        if(c=='(')
        {
            return 1;
        }
        else
            return -1;

    }

    public String removeOuterParentheses(String S) {
        StringBuffer s1 =new StringBuffer();
        StringBuffer sb = new StringBuffer();
        int flag = 0;
        if(S.length()<=0){
            return String.valueOf(sb);
        }

        for(int i=0;i<S.length();i++) {
            char ca = S.charAt(i);
            flag += retflag(ca);
            sb.append(flag);
        }

        for(int i=0;i<S.length();i++)
        {


           if(sb.charAt(i)=='1'&&S.charAt(i)=='(')
           {
//               continue;
//               System.out.println("1111111");

           }
           else {
           if(sb.charAt(i)=='0'&&S.charAt(i)==')')
           {
//               continue;
//               System.out.println("00000000");

           }
           else
               {



                   System.out.println("---------"+S.charAt(i));
                   s1.append(S.charAt(i));
               }

        }}

//            char ca = S.charAt(i);
//            if(stack.isEmpty())
//            {
//                stack.push(ca);
//
//            }
//            if(stack.peek()=='('&&ca==')')
//            {
//                stack.pop();
//            }
//            if(stack.peek()=='('&&ca=='(')
//            {
//
//            }


        return String.valueOf(s1);

    }


    /**
     *   1436.旅行终点站
     * @param paths
     * @return
     */
    public String destCity(List<List<String>> paths) {
        ArrayList<String> arrayList01 = new ArrayList<>();
        ArrayList<String> arrayList02 = new ArrayList<>();
        for(int i =0;i<paths.size();i++)
        {
            arrayList01.add(paths.get(i).get(0));
            arrayList02.add(paths.get(i).get(1));

        }
        for(int j =0;j<arrayList01.size();j++)
        {
            if(arrayList02.contains(arrayList01.get(j)))
            {
                arrayList02.remove(arrayList01.get(j));
            }
        }

        return arrayList02.get(0);

    }



    /**
     *   letcode 1431.拥有最多糖果的孩子
     * @param candies
     * @param extraCandies
     * @return
     */
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> ret = new LinkedList<Boolean>();
        int[] cacopy = candies.clone();
        Arrays.sort(cacopy);
        for(int j = 0;j<candies.length;j++)
        {
            if(candies[j]+extraCandies>=cacopy[cacopy.length-1])
            {
                ret.add(true);
            }else
                {
                    ret.add(false);
                }

        }
        return ret;

    }



    /**
     *   1351.统计有序矩阵中的负数
     * @param grid
     * @return
     */
    public int countNegatives(int[][] grid) {
        int count =0;
        int rows = grid.length;
        int cows = grid[0].length;

        for(int i = 0;i<rows;i++) {

                Arrays.sort(grid[i]);
                int start = 0;
                int end = cows-1;
                while (start<=end){
                int mid = (end-start)/2+start;
                if (grid[i][mid] < 0) {
                    count = mid-start+1 +count;
                    start = mid+1;
                    }
                if(grid[i][mid]>=0){
                    end = mid-1;
                }


                }

        }

        return count;
    }


    public static void main(String[] args) {
//        int[][] a =  {{4,3,2,-1},{3,2,1,-1},{1,1,-1,-2},{-1,-1,-2,-3}};
        int[][] a = {{1,-1},{-1,-1}};
        Day06 day06 = new Day06();
//        int i = day06.countNegatives(a);
//        System.out.println(i);
//        String s1 = "()()()()()()()()()(())()((()))()()()(())(())(())((()(()))())()()()((()()))()()()()()((()))(())()()()()()()()(()())()(((())))()()(()(()())())()()()()()()()(())()(()())()()()()()()()()()(())()()()(())()()()()(()())(((()())))(())()()()(())()((())(((())))())()()()((((())())))()()()((()))()()()()()()((()))()(()())()()((())(())(()))()()((()))(())()()()()()(()())((((((()))()())(()))))((()()))()()()()()()()()()(((())))(())()()()(())()()(())()()()()()()()()()()()()()()((()(()())()(())(()))()())()()()()()()()()()(())()()()(())((()))()()()()()()()(())()(())()()((()))()()()()()()()(())()(()())(()())(()())(())()((()))()()()()()()()()((()))()()()(())()()()()(())(((()()(((((()))))()))(((())))))(()())()((()()))()()((())(()()()))()()((()))()()()()()(())((())())()()(())()()()(()())()()()()()()()((())())()()()()(())()()()()()(()())()()(()())()(()()())(())()()(((()())()))(())(()())()()()()()()()()(())(())(())()(())()()()()(())()()(())()(()())()(()())(())(())()()()()(())()(()())(((())(())))()()()((()))(()(())()())()(())(()()())(()())()()()()(((()((())()))(())))()(())((()))()()((())()())((())())()()((()()()())(())())()((()()))()()(())()(())()()()()((())())()()(()())()()()()(())()()()(())(())(())()()()()()(())()()()()()()()(()())()()()()(())()()()(((())()(()))())()(()())(()(()()))(())()()()()(())()()()()()()()()(())()(())()()()()()()(()())()((()()()))()()(())()()()()(())(())(())(())()()()()()((((())())(())))()(()())()()()((()))(())()()(())(()()())()()()()()()()()(()())()(())()()(())()(()()()(())())()(()(((()))))()()()()()()()()()()()()()()()()(())((()()))()(())()()()()(()())()()()()()(())()()()()(()()())()()()((()))()(((()())))()()()()()(((()(())))())()(((())))()()()()()()(()(()))()()(())()(())()()((()))()()()((((())))((()))(()))((())((())))()()(()())()()()()()()()()()()((()()))()()(())()()()()()(()(()()()()))(())()()()(())()()()()(()())(())()()()()()()()(())(()())()((()))()()()()()(())()()()()()()()(())()(())((())())()(((())))()()((()))()()()()()()()()()()(()())()(())((()(()()())()))(())()()()()((()()))()()()(())(())()(())(())()()(())()(((())))()()()(())()()()(()()(()))()(())()(())()()(())(())()()()(())()()()()()()(())()((()))(())((()()))()()(())()()()()(())()()()()()(()())()()()()()()()((()()))()()(((())))()(((())(()))())()()(())()((()))()()()()()()()()(())()()()()()()(())()((())(()())())()()()()()(())()(())()()()()()()(())((())())()(())()()()()(())()(())()(())()(()(())((())))()()()()()()()()(())()()()()((((()))()())())((()))()(())()(()())(())()()()()()()()()(((())))((()())())(((()()))()())()()((())()(()))()()()()()()()()(())()()()()()()()()()(())()((((()()))(())))(()()())()(())()()((()()))()()()()()()()()((()()))()()()(())(())((())())(()())((()()))(())()()((()()))()()()(()(()(()))((()()(())))())()()((()))()()()()()(()())()((((()))))()(()())()((())(())((())()))()()()()()()(())()()(()())()(())()()()()()()()()()()(()())()()(()())()((()()))()()()()(())()()()((((()))))(()()())((()))()()((()()))()()()()()()((()()(()))())()()()()()()()()(()(())())(())()(())()()(()())((()))()()()()(())(((()(()))()))()()((()))()((()))()()()()()(())()(()())()()()(((())))()()()()(())()()()()(()())()()()()(()())()()()()((()()(())()))(())()(()())()(())()()()()()()()((())())()()(())((()))()()()()()(())()()()()()(()())()()()(())((((())()))())(())()(())()((())((())(()())(()())())()()(()))()()(()())(())()(()()(()))()()()()()()((())())()()(())(())()()((((()))))()()()(())()()()(()((()(())))((())())())(())()()()((()())()())()((()))(())((())((())))()(((()))(())())()()()(())(())(())()(())()(())()()(())(())()()(())()()((())())()()()(())()()((()))((()))()()()()()()()()()()()((((())))(()()))()((()))()()()(())(()())()(())(())()()()()()()()(()())()(())(())()()((()()())(()))()()()()()()()(())()()(())()()()((()()()))()()((())())()()()()()(())()()()()(()())(()())()()()((()))()((()))(())()(((((()(((((()())()))))))())))()()()()()()()()(())()()((()())()()()())()()(())()()()(())()()()()()()(()(()()()))((((()))))()()()()()()()()(((())))(())()()()()()()(())((()(()())))(())(()())()(())()()()()()()()()()()()((()))(())(()())()(())((()))()()()()()()(()())()()()()()()((()))()()()()(((()))())()(())()((()())())()()()(())(())()()()()()(()(((())))()(()))(()(())()()())()()()(((())))(()(()))()()()(()(()))()()()((()))()()()()()(())()()(()()())()()()()(()())()()((()(()))(()))()()(())()(())((()()))()()()()()()()(())()()()()()()((())())()()((()))()()()()()()((())())()()()(())(((()()((((()))())))))()()(())()()()()()()(())()()(()(()))(())()()((()))()()(((((((((()())())((())))()())))()(())())))()((()))(())()()()(()())()(())()()(())()()(())()(())()()()()()()()()()()((()))()()(())(())()(())()()((((()()))))()()()((()()())())()()(((())())(()()()())()((()(()()(()(()()))((()))))))()()()()((()))(()(())())((()))()()()()(())()(())()(()(()))()()()()(((()())))(())()()()()()()()()()()()()((()())((()())()()()))()()()()()(())(()())()(())(()())()()()()((()))(())()()(()())(()()(()()))()()((()()()))()(())()()()()()()()()()(()((())()))()(())((()))()(())()(()(())(()()))()()()(())()()()(())()()(()())()()()((()()))()()()()()()()()()()(((()()))())()()(())((()))()(((())()))()()(())()(()()())()()()()()()()()()((()(()())))()(()((())))()(((())))()()()()()()()()()()()()()((()))()((()))()(())()()(())()()()()(())()()()()()()(())()()()(()())(())()()(())()((()))()()()()()()(()())((())(()))()()(()()())()()()()()()()()((())(()))()()()((()))(((())()()))()(()())()()()((()()))()()()()()((((()()(()()()()(()))))()))(())()()()()()()()(()())()(())(())()()()()()()()()()()()()(())()()()()(())()()(())(()())()()()()()()()()()()(())()()()()()(())()(()())()()()()()(()())()(())(()((()(()()((()))))()()(())))()()()((()(()))()(()(()(((()((()))))())))())()()(())((()))()()()()((()(()))(()))()()()((()()((()))))(()())()(())()()(())()()()()()()()((()))()(())()(())()(()((())))(()((())))(())()(())()()()()()((()())((())))()()()(())(((())))()(())(())(())()(())()(())()(()()()())(()())(()())()()()()()()()()()()(())(())()()()()()()((())())(()())()(())(())()(())()()(())(())()()((())(((()()))()))()()()()()()()()(())()()()((()()))(((())())()(())()())()()()()(((()())))()(())()()()()()()()()()()()()()()(())()()()()(()())()(()())()()()(())()(()(()())())(())()(())()()(()())(())(()())()()()()()()()(()())(())((()(())()))()()()()((())())()()((()())())()()(())()(())()(())(())(()())()()()(()()(()))()()()()()()(())()()(())()(()())()()()()()()()()()()()(())()()()()()()(())(()(()))()((())(())())()(())(())()(())()()()()()()(())()()()()((()))()()()()()()()()()()()()(())(())(())()()()(((())))()()(())()()()(()())()(())()()(()())()()()()()(())()()(((()))(()()((()))))()()(((((())()(()))))())()()()(())()(((())))()(()())()()(())(()(((())))(()(()(()))))()()()(())()((()((()()))()))()()(((()()(())()())())(())()()())()()()(((())))(())()()()()()()()()(((())()))(())()(())()()()(()()()())(()())()()()()(((((()(()))))()))()()((()))()(())()()(())(()(()))(())()(())()()()(())(())()()()()()()()((()))()()()()()()()()()((()()())())()(()(()(())()))()()(()())()()()()()()(())()(())()()((()()())()()())()()(())(())()()()()()()()(())((())())((()))()()()(())(())()()()(())()()()((()(())()))()()()(((()())))()(())()()()()()()(()())()(())(())(()())()()()(())()(((())))(())()(()())()()()()(())(())()()(())()()()()()()((()))()()()()()((()))((())())(())()()()()()()()()(((()()))())(()((())))(())()(())((())())((())())()()()((()()()()()))()()()()()(())()()(())()(())()(())()(())(())()()()((()(())))((()()))((()(()()))((())))()((()))()()(())(()())()(())(())((()))()(()())()(()())()(())()()()(())()((()))((()()()))()()()(())()()()()()(())()()((()))()()()()()()(())((()((((()())())))))()(())()()()(())(())()()()(())()(((()(()))(()()(()((()))((()())()))))(()))()(((())))()()()(())(()())()(()(()))((()())())()()(())(())()(((()((())())(()))))()(())()(())(())((()()))(((())()))((((((((()(())()())))))())(())))()()()(())()()()()(()(()()))(()())()()(())()(())()(()(()()()()))()()()()(())()()()()()()(())()()(((()()())))(())(()())(())(())(())(())((()))()()()()()()()(())()(())()()((())()())(())(())(())()()()(())()()()((())())()()()()()()()(())()(())()()()()()()()(((()))())()(())()()()()()()()(()()())(()()()(()))(()())(())((((()))())())()()()()()(())()()()(((())))()()(())()()()()((()()(())))()()()()()()(())()()()()()()()()((()()))()()(())()(())()()()()()((()()(())))()(()())(()())((()))()()()()(())()()()()()()()()(())(()())(()(()()()))()()()()()()()(())()()()(())()()()()(())()()()(())()()()()()()()(())(())()(())()(())()(())()()(())()()()((()))()()()()()((()))(())()()()()(())(()(())()())()()()()(()(())(())())()(()()((())))()()(())()()()()()()()()()()(()(()(())))()(((())(()(())(((((()())())))(())))))()(()(())()()(()))(()())()()()()()()()()()()(()())()(())()(())(())()()(()())()()(())(()(()()()))(())()(())((()))()()()()()()(()((())()(()))())(((()(())))())()()((()()))()()(())()()()()()(()((()(()))))()()()()()()(())()(()(()))()()()()()()()()((()())())((()))()(())(())()()(()())()()(())(())()()()(((())))()(()())(((()))())()()()()()()()()((()))()()()()()()(()())((()))()()()((())())(()())(())(((()()())())())(()())()((()((())))())()()()(()((()(((())))())))()()(())()()()()(())()()()()()(((())()))(())()()()()(())()((()))()()()(()(()))()()()(((())))()()()()((()))((((())())))()()()()(())(())((())()()()())()()((())(())())(())()()()(()())()((()))()()()()()((()))()(()(()))()()()()()()(())()()(()())()()()()(())()()()()()()(())()()((()))()(())(((()()(())())))()()(()())()(())()()()(())()((()(())))(())()()()(()()())()()()()()()(())(())()()()()(())(())()()()()((()))(())()()()(())()()(())()()((()()))()()()()(())()((()(()))()())()()()(())((()()()((()()))()))()()()()()()()()()(())(())()()()()(((())()))()(())()(())()()()()()(()())()()(())()()()()()((())()())(())()()()()(())()()()(())()()()(()())(())()()()(())()()()()()(((())()())())()(())()()()(())()()()(()())()(((())))()()()((()())()())()(())()()()(())((())((())()))(())()()()(())()(()(()))()()(())()()(()(()))()(())(())()()()()()()()()()(((()()())))()()()()(()())()()()((()))()()(())()()(())()()()()()()(((()))(()()()))()()()()()()(((())()))()((()(())))((()))()((()))()((()()()))(())()()(())()()()()()()()()(()())()()()";
////
////        String s = day06.removeOuterParentheses(s1);
////        System.out.println(s);
////        String s2="()(())()()()(()(()))()(()())(())()()()((()))()(()())()()()()()()()()((()()))()()(())(((())))()(((())()))(())(())()()(())(())(())(())()()()(((((()))()())(())))(()())((()))()()()(()(()())()(())(()))()()()()(())()()(())()()()()()()()()(())(())()()((()()(((((()))))()))(((()))))()()(()())(())(()()())(())()(())()()()()(())()()()()()()()()()()((()())())()()()()()()()()()()()()()()()()()()((())(()))(())()(())()()()()()()()()((()((())()))(()))()(())(())()()(())()(()()()())(())()(()())()()(())()()()()()()()()()()()((())()(()))()()()()(()())()()()()()()(()()())()()()()()(((())())(()))()()(())()()()()()()()()()()()()(())()()(((())))()(()())()()()()()()()(())((()()))((()(())))()((()))()(())()()(())(((())))((()))(())(())((()))()()(()())()()(()()()())()()()()()()()()(())()()()(())()((()))(())()()()(()(()()())())()(()())()()()()()((()))()()()(())()()()()()()(())()(()())()()()()(()())((()))((())(()))()()(())()()(())(()())()()()()(())()()()()()()(())((()))()(((()))()())()(())()()()()((()))(()())()((()()))()()(())()(())()()(((()()))(()))()()()()(()())(()())()()(())()()()(()())()(()())()(()(()))((()()(())))()(())()()(((())))()()(())(())((())())()()()()()()()()(()())()(((())))()()()(())(()())(()()(()))()()(())()()()()()(())()((()(()))())(())(())()()()((()))()()()()()(()()(())())()()()()(())()()(())()()()()(((())()))()()()(())((())(()())(()())())()()(())()()()()()(())(())()()()(((())))()()((()(())))((())())()()(()())()()(())()(())((()))((()))(())()()()()()()()()()(())()()(())(())(((())))(()())(())()()()()()()()()()(()()())(())()()(()()())(())()()()()()()(())(())()((((()(((((()())()))))))()))()(()())()()()()()()()(()()())(((())))((()))()()(()(()()))()()()()(())()()()()(())()()(())((()))()()(()())()()()()(((())))()(())()(())()()()((()))()(())()(())(())()()()()()()(()(()))(())()()(()())()(())()(())(())()()((()()((((()))()))))()()()(())()(())((((((((()())())((())))()())))()(())()))(())()()()()()()()(())()()()(((()())))(()()())()((())())(()()()())()((()(()()(()(()()))((())))))(())()(())()(())()()()(())((()()))()(()())((()())()()())()()()()()()(())()()()()()(()())(()()())()()((())())()(())()()(())(()())()()()()(()())((()()))()()(())((())())()()()()(()(()()))()((()))((()))(())(())()()()()()()()()(())()()(())(())()()()(())(())(())((())()())()()(()())(((()()(()()()()(()))))())()()()()()()()()()()()()()()()()()()((()(()()((()))))()()(()))(()(()))()(()(()(((()((()))))())))()()(())(()(()))(())(()()((())))()()()()(())()()()((()))()((()))()()(()())((()))()((()))()()()()()()()()()()()()()()()(())()()()()()()()()(())(((()()))())()(()())((())())()(())()()((()()))()()()()()()()()(()())()()()()()()()()()()()(()(())())(())()(()())()()()()()()()()()(())()()()()()()()(())(())(())()()()()()(())()()()((()))()()()()()()()((()))(()()((())))((((())()(()))))()()((()))()()()()(((())))(()(()(())))()(()((()()))())((()()(())()())())(())()()()((()))()((())())()()()()()()()()((((()(()))))())(())()()()(())()()()()(())(()()())()()(()(())())()()()()(()()())()()()()()()(())()(())()()()(()(())())((()()))()()()()()()()()((()))()()()()()()(())(())(())()()((()()))()()((()))()()(())()(())()(()()()()())()()()()()()(()(()))(()())(()(()()))((()))(())()()()()()(())()()()()()()(())(()()())()()(())()(()((((()())()))))()()()()((()(()))(()()(()((()))((()())()))))(())((()))()()()()(())(()())()()()((()((())())(())))()()()(()())((())())(((((((()(())()())))))())(()))()()(()())()()()()()(()()()())()()((()()()))()()()()()()()(())()()(())()()()()()()(())()()()((()))()()()()()()()()(())()()()(((()))())()()((()))()(()()(()))()(()())()()(()()(()))()()()()(())()()()()()(()()())()()()()()()()()()()(())(())()()()(())()()()(())(())()()()((()))()()(()(()))((())(()(())(((((()())())))(()))))()(())()()(())()()()()()()()()()()()(()()())()()(())()((())()(()))()((()(())))()(()())()()((()(())))()()(())(()())()(())()()()()()()((()))()()((()))()(())()()(())(())()()()()((()()())())()()()(()((())))()()((()(((())))()))()()((())())()()(())()(())((()))(())(((())()))()()(())()()()()(())(())()()()()(())(())()(())()()()()()(())()((()()(())()))()()()()(()(()))()()()()()()()()(())()()()(()())()(()(()))()()()(()()()((()()))())()()((())())()()()()()(())()()()()()()()()()((())()())()()()()()((()))(()())()()()()(())((())())()()()(())()()(())()()((()()()))()()(())()()((()))(()()())((())())(()(()))(())(())(()()())()()()()";
////        if(s.equals(s2))
////        {
////            System.out.println("yese");
////        }
////        else
////            {
////                System.out.println("no");
////            }
////
////
////
//        int[] candies = {12,1,12};
//        int extraCandies = 1;
//        List<Boolean> booleanList = day06.kidsWithCandies(candies, extraCandies);
//        for(int i=0;i<booleanList.size();i++)
//        {
//            System.out.println(booleanList.get(i));
//
//        }
//        [["London","New York"],["New York","Lima"],["Lima","Sao Paulo"]]
//        List<List<String>> lists = new LinkedList<>();
//        List<String> paths = new LinkedList<>();
//        paths.add("London");
//        paths.add("New York");
//        lists.add(paths);
//        List<String> path2 = new LinkedList<>();
//        path2.add("New York");
//        path2.add("Lima");
//        lists.add(path2);
//        List<String> path3 = new LinkedList<>();
//        path3.add("Lima");
//        path3.add("Sao Paulo");
//        lists.add(path3);
//        String s = day06.destCity(lists);
//        System.out.println(s);
//        String s = "\"We are happy.\"";
//        String ret = day06.replaceSpace(s);
//        System.out.println(ret);
//        int[] arr = {17,18,5,4,6,1};
//        int[] replaceElements = day06.replaceElements(arr);
//        for(int i=0;i<replaceElements.length;i++)
//        {
//            System.out.println(replaceElements[i]);
//        }
        int i = day06.hammingDistance(93, 73);
        System.out.println(i);



    }




}
